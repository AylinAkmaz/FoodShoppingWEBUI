@using FoodShoppingWEBUI.Core.ViewModel;
@model StoreOrderViewModel
@{
    ViewData["Title"] = "Market Siparişleri";
    Layout = "~/Areas/AdminPanel/Views/_Layout.cshtml";
}

@Html.AntiForgeryToken()
<div class="card">
    <div class="card-header">
        <h3 class="card-title">Market Siparişleri</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-block btn-info" data-toggle="modal" data-target="#modal-NewStoreOrder">Ekle</button>
            <button type="button" class="btn btn-block btn-warning" data-toggle="modal" data-target="#modal-GetUser">Kullanıcı</button>
            <button type="button" class="btn btn-block btn-warning" data-toggle="modal" data-target="#modal-GetStoreProduct">Market Ürünü</button>


        </div>
    </div>
    <div class="card-body">
        <table id="tblStoreOrder" class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th style="width: 10px">#</th>
                    <th>Sipariş Adı</th>
                    <th>Kullanıcı Adı</th>
                    <th>Market Ürünü</th>
                    <th style="width:20%"></th>

                </tr>
            </thead>
            <tbody>
                @{
                    for (int i = 0; i < Model.StoreOrders.Count(); i++)
                    {
                        <tr>
                            <td>@Convert.ToInt32(i+1)</td>
                            <td>@Model.StoreOrders[i].Name</td>
                            <td>@Model.StoreOrders[i].UserName</td>
                            <td>@Model.StoreOrders[i].StoreProductName</td>
                       
                            <td>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-info btnStoreOrder" data-guid=@Model.StoreOrders[i].Guid data-toggle="modal" data-target="#modal-DetayStoreOrder">Güncelle</button>
                                    <button type="button" class="btn btn-danger btnStoreOrderSil" data-guid=@Model.StoreOrders[i].Guid>Sil</button>
                                </div>
                            </td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="modal-GetUser">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Kullanıcılar</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="ddlStoreOrderUser">Kullanıcılar</label>
                    <select class="custom-select rounded-0" id="ddlStoreOrderUser">
                        @{
                            for (int i = 0; i < Model.Users.Count(); i++)
                            {
                                <option value=@Model.Users[i].Guid>@Model.Users[i].FirstName</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Kapat</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-GetStoreProduct">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Market Ürünü</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="ddlStoreOrderStoreProduct">Market Ürünü</label>
                    <select class="custom-select rounded-0" id="ddlStoreOrderStoreProduct">
                        @{
                            for (int i = 0; i < Model.StoreProducts.Count(); i++)
                            {
                                <option value=@Model.StoreProducts[i].Guid>@Model.StoreProducts[i].Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Kapat</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="modal-NewStoreOrder">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Sipariş Oluştur</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="txtStoreOrderName_Add">Sipariş Adı</label>
                    <input type="text" class="form-control" id="txtStoreOrderName_Add">
                </div>

                <div class="form-group">
                    <label for="ddlStoreOrderUserAdd">Kullanıcı</label>
                    <select class="custom-select rounded-0" id="ddlStoreOrderUserAdd">
                        @{
                            for (int i = 0; i < Model.Users.Count(); i++)
                            {
                                <option value=@Model.Users[i].Guid>@Model.Users[i].FirstName</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="ddlStoreOrderStoreProduct_Add">Market Ürünü</label>
                    <select class="custom-select rounded-0" id="ddlStoreOrderStoreProduct_Add">
                        @{
                            for (int i = 0; i < Model.StoreProducts.Count(); i++)
                            {
                                <option value=@Model.StoreProducts[i].Guid>@Model.StoreProducts[i].Name</option>
                            }
                        }
                    </select>
                </div>

              
                    <div class="modal-footer justify-content-between">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Kapat</button>
                        <button type="button" class="btn btn-primary" id="btnStoreOrder_Add">Kaydet</button>
                    </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-StoreOrderUpdate">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Sipariş Güncelle</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="txtStoreOrderName_Update">Sipariş Adı</label>
                    <input type="text" class="form-control" id="txtStoreOrderName_Update">
                </div>

                <div class="form-group">
                    <label for="ddlStoreOrderUser_Update"> Kullanıcı</label>
                    <select class="custom-select rounded-0" id="ddlStoreOrderUser_Update">
                        @{
                            for (int i = 0; i < Model.Users.Count; i++)
                            {
                                <option value=@Model.Users[i].Guid>@Model.Users[i].FirstName</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="ddlStoreOrderStoreProduct_Update"> Market Ürünü</label>
                    <select class="custom-select rounded-0" id="ddlStoreOrderStoreProduct_Update">
                        @{
                            for (int i = 0; i < Model.StoreProducts.Count; i++)
                            {
                                <option value=@Model.StoreProducts[i].Guid>@Model.StoreProducts[i].Name</option>
                            }
                        }
                    </select>
                </div>

            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="btnStoreOrder_Update">Kaydet</button>
            </div>
        </div>
    </div>
</div>



<script>
    $(function () {
        $("#tblStoreOrder").DataTable({
            "responsive": true,
            "lengthChange": false,
            "autoWidth": false,
            "buttons": ["copy", "csv", "excel", "pdf", "print", "colvis"]
        }).buttons().container().appendTo('#tblStoreOrder_wrapper .col-md-6:eq(0)');

        $('#btnStoreOrder_Add').click(function () {

            var storeOrder = {
                Name: $('#txtStoreOrderName_Add').val(),
                userGuid: $('#ddlStoreOrderUserAdd').val(),
                StoreProductGuid: $('#ddlStoreOrderStoreProduct_Add').val(),
            }


            var formData = new FormData();
            formData.append("Name", storeOrder.Name);
            formData.append("userGuid", storeOrder.userGuid);
            formData.append("StoreProductGuid", storeOrder.StoreProductGuid);



            $.ajax({
                url: '/Admin/AddStoreOrder',
                type: 'POST',
                data: formData,
                cahce: false,
                contentType: false,
                processData: false,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (response) {
                    if (response.success) {

                        Swal.fire({
                            position: 'top-end',
                            icon: 'success',
                            title: 'Sipariş Başarıyla Eklendi',
                            showConfirmButton: false,
                            timer: 3000
                        })
                        setTimeout(function () { window.location.reload() }, 3000);

                    }
                    else {

                        var HataBilgisi = response.HataBilgisi;
                        var Hatalar = '';
                        for (var i = 0; i < HataBilgisi.Hata.length; i++) {
                            Hatalar += HataBilgisi.Hata[i] + '</br>';
                        }

                        Swal.fire({
                            icon: 'error',
                            title: HataBilgisi.HataAciklama,
                            html: Hatalar
                        })


                    }
                },
                error: function (err) {

                    Swal.fire({
                        icon: 'error',
                        title: "HATA OLUŞTU. TEKRAR DENEYİNİZ.",
                    })
                }
            });

        });

        $('.btnStoreOrder').click(function () {
            var guid = $(this).attr('data-guid');
            $.ajax({
                url: '/Admin/StoreOrder/' + guid,
                type: 'get',
                success: function (response) {
                    if (response.success) {

                        $('#txtStoreOrderName_Update').val(response.storeOrder.Name);

                        $('#btnStoreOrder_Update').attr('data-guid', guid)

                        const select = document.querySelector('#ddlStoreOrderUser_Update')
                        select.value = response.storeOrder.UserGuid
                        const select = document.querySelector('#ddlStoreOrderStoreProduct_Update')
                        select.value = response.storeOrder.StoreProductGuid
                    }
                    else {

                        var HataBilgisi = response.HataBilgisi;
                        var Hatalar = '';
                        if (HataBilgisi.Hata != null) {
                            for (var i = 0; i < HataBilgisi.Hata.length; i++) {
                                Hatalar += HataBilgisi.Hata[i] + '</br>';
                            }
                        }


                        Swal.fire({
                            icon: 'error',
                            title: HataBilgisi.HataAciklama,
                            html: Hatalar
                        })


                    }
                },
                error: function (err) {

                    Swal.fire({
                        icon: 'error',
                        title: "HATA OLUŞTU. TEKRAR DENEYİNİZ.",
                    })
                }
            });


        });


        $('#btnStoreOrder_Update').click(function () {

            var storeOrder = {
                Name: $('#txtStoreOrderName_Update').val(),
                storeOrder: $('#ddlStoreOrderStoreProduct_Update').val(),
                storeOrder: $('#ddlStoreOrderUser_Update').val(),
                Guid: $(this).attr('data-guid')
            }


            var formData = new FormData();
            formData.append("Name", storeOrder.Name);
            formData.append("StoreProduct", storeOrder.StoreProduct);
            formData.append("User", storeOrder.user);
            formData.append("Guid", storeOrder.Guid);


            $.ajax({
                url: '/Admin/UpdateStoreOrder',
                type: 'POST',
                data: formData,
                cahce: false,
                contentType: false,
                processData: false,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (response) {
                    if (response.success) {

                        Swal.fire({
                            position: 'top-end',
                            icon: 'success',
                            title: 'Sipariş Başarıyla Güncellendi',
                            showConfirmButton: false,
                            timer: 3000
                        })
                        setTimeout(function () { window.location.reload() }, 3000);

                    }
                    else {

                        var HataBilgisi = response.HataBilgisi;
                        var Hatalar = '';
                        for (var i = 0; i < HataBilgisi.Hata.length; i++) {
                            Hatalar += HataBilgisi.Hata[i] + '</br>';
                        }

                        Swal.fire({
                            icon: 'error',
                            title: HataBilgisi.HataAciklama,
                            html: Hatalar
                        })


                    }
                },
                error: function (err) {

                    Swal.fire({
                        icon: 'error',
                        title: "HATA OLUŞTU. TEKRAR DENEYİNİZ.",
                    })
                }
            });

        });


        $('.btnRemoveStoreOrder').click(function () {
            var storeOrderlGuid = $(this).attr('data-guid');

            Swal.fire({
                title: 'UYARI!',
                text: "'Siparişi Silmek İstediğinizden Emin misiniz?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet!',
                cancelButtonText: 'Hayır',
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Admin/RemoveStoreOrder/' + storeOrderlGuid,
                        type: 'post',
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                        },
                        success: function (response) {
                            if (response.success) {

                                Swal.fire({
                                    position: 'top-end',
                                    icon: 'success',
                                    title: 'Ürün Başarıyla Silindi',
                                    showConfirmButton: false,
                                    timer: 3000
                                })
                                setTimeout(function () { window.location.reload() }, 3000);

                            }
                            else {

                                var HataBilgisi = response.HataBilgisi;
                                var Hatalar = '';
                                for (var i = 0; i < HataBilgisi.Hata.length; i++) {
                                    Hatalar += HataBilgisi.Hata[i] + '</br>';
                                }

                                Swal.fire({
                                    icon: 'error',
                                    title: HataBilgisi.HataAciklama,
                                    html: Hatalar
                                })


                            }
                        },
                        error: function (err) {

                            Swal.fire({
                                icon: 'error',
                                title: "HATA OLUŞTU. TEKRAR DENEYİNİZ.",
                            })
                        }
                    });
                }
            })
        });

    })

</script>

